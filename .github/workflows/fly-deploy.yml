# .github/workflows/deploy.yml
# See https://fly.io/docs/app-guides/continuous-deployment-with-github-actions/
name: Fly Deploy
on:
  push:
    branches:
      - main
      - "cycle-*"
      - "cooldown-*"
  pull_request:
    branches: [main, "cycle-*"]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run tests
        run: bun test

      - name: Run lint
        run: bun run lint

      - name: Security audit
        run: bun run audit

  # Test Docker build to catch build errors early
  docker-test:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Test Production Docker Build
        run: |
          docker build -t test-build .

      - name: Test Development Docker Build
        run: |
          docker build -f Dockerfile.dev -t test-build-dev .

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    # Deploy cycle and cooldown branches to dev environment
    if: startsWith(github.ref, 'refs/heads/cycle-') || startsWith(github.ref, 'refs/heads/cooldown-')
    concurrency: deploy-dev
    environment: development
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy to development
        run: flyctl deploy --config fly.dev.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    if: github.ref == 'refs/heads/main'
    concurrency: deploy-prod
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy to production
        run: flyctl deploy --config fly.prod.toml --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
